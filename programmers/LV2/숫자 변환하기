def solution(x, y, n):

    depth_list = [1000000] * (y + 1)
    depth_list[x] = 0

    for i in range(x, y + 1):
        for op in [i * 2, i * 3, i + n]:
            if op <= y:
                depth_list[op] = min(depth_list[op], depth_list[i] + 1)

    if depth_list[y] != 1000000:
        return depth_list[y]
    return -1


from collections import deque


def solution_fail_1(numbers):
    answer = [-1] * len(numbers)
    max_list = deque([numbers[-1]])

    for i, n in enumerate(numbers[:-1]):
        prev, cur = numbers[-2 - i], numbers[-1 - i]
        if cur > prev:
            max_list.appendleft(cur)
            answer[-2 - i] = cur
        else:
            # 이 부분에서 시간이 오래걸려서 시간초과 오류 발생
            for m in max_list:
                if m > prev:
                    answer[-2 - i] = m
                    break
    return answer
